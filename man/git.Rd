% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/git_walk.R
\name{git}
\alias{git}
\alias{git_walk}
\title{Pipe-able, vectorized, and lightweight implementation of git in R}
\usage{
git(path, command, stop_on_error = TRUE, ...)

git_walk(path, command, verbose = FALSE, stop_on_error = TRUE, ...)
}
\arguments{
\item{path}{Path to one or multiple Git repos.}

\item{command}{A Git command, e.g. "status" or "log --oneline -n 1".}

\item{stop_on_error}{If Git fails, do you want an R error?}

\item{...}{Other arguments passed to \link{system}.}

\item{verbose}{Print Git's output?}
}
\value{
\code{git_walk()} is called for its side effect; it returns \code{path}
invisibly.
}
\description{
Apply a Git command to each \code{path}.
}
\examples{
library(magrittr)

# helper
walk <- function(x, f, ...) {
  lapply(x, f, ...)
  invisible(x)
}

repos <- file.path(tempdir(), paste0("repo", 1:2))
repos \%>\% walk(dir.create)

# Fails because the repo isn't initialized
repos \%>\%
  git_walk("status") \%>\%
  try()

# Don't throw an error
repos \%>\%
  git_walk("status", stop_on_error = FALSE)

repos \%>\% git_walk("init")

repos \%>\% git_walk("status")
repos \%>\% git_walk("status", verbose = TRUE)

repos \%>\%
  git_walk("add .") \%>\%
  git_walk("config user.name Jerry") \%>\%
  git_walk("config user.email jerry@gmail.com") \%>\%
  git_walk("commit -m 'Initialize' --allow-empty") \%>\%
  git_walk("log --oneline -n 1", verbose = TRUE)

# Cleanup
walk(repos, unlink, recursive = TRUE)
}
