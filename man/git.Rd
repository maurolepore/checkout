% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/git.R
\name{git}
\alias{git}
\alias{git_chr}
\title{Pipe-able, vectorized, and lightweight implementation of git in R}
\usage{
git(path, command, verbose = FALSE, stop_on_error = TRUE, ...)

git_chr(path, command, stop_on_error = TRUE, ...)
}
\arguments{
\item{path}{Path to one or multiple Git repos.}

\item{command}{A Git command, e.g. "status" or "log --oneline -n 1".}

\item{verbose}{Print Git's output?}

\item{stop_on_error}{If Git fails, do you want an R error?}

\item{...}{Other arguments passed to \link{system}.}
}
\value{
\code{git()} is called for its side effect; it returns \code{path}
invisibly. \code{git_chr()} returns a list of characters containing the text
that Git outputs.
}
\description{
Apply a Git command to each \code{path}:
}
\details{
\itemize{
\item \code{git()} is pipe-able. It's called for its side effect.
\item \code{git_chr()} Is not pipe-able. It's called to compute on Git's text-output.
}
}
\examples{
library(magrittr)

# helper
walk <- function(x, f, ...) {
  lapply(x, f, ...)
  invisible(x)
}

repo <- file.path(tempdir())
dir.create(repo)
on.exit(unlink(repo, recursive = TRUE), add = TRUE)

# git() is a thin wrapper around `system("git -C <path> <command>", ...)`
# It's fit for pipes
repo \%>\%
  git("init --initial-branch=trunk") \%>\%
  git("branch")

repos <- file.path(tempdir(), paste0("repo", 1:2))
repos \%>\% walk(dir.create)

# Fails because the repo isn't initialized
repos \%>\%
  git("status") \%>\%
  try()

# Don't throw an error
repos \%>\%
  git("status", stop_on_error = FALSE)

repos \%>\% git("init")

repos \%>\% git("status")
repos \%>\% git("status", verbose = TRUE)

repos \%>\%
  git("add .") \%>\%
  git("config user.name Jerry") \%>\%
  git("config user.email jerry@gmail.com") \%>\%
  git("commit -m 'Initialize' --allow-empty") \%>\%
  git("log --oneline -n 1", verbose = TRUE)

# Cleanup
walk(repos, unlink, recursive = TRUE)
}
